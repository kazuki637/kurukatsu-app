rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // ユーザープロフィール
    match /users/{userId} {
      allow read: if request.auth != null;
      allow update, delete: if request.auth != null;
      allow create: if request.auth != null;

    }

    // ユーザーの通知トークン
    match /users/{userId}/notificationTokens/{tokenId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }

    // 通知トークンの読み取り（連絡送信用）
    match /users/{userId}/notificationTokens/{tokenId} {
      allow read: if request.auth != null;
    }

    // ユーザーへのサークルメッセージ
    match /users/{userId}/circleMessages/{messageId} {
      allow create: if request.auth != null;
      allow read: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && request.auth.uid == userId;
      allow delete: if request.auth != null && request.auth.uid == userId;

      match /reads/{readerUid} {
        allow create, update: if request.auth != null;
        allow read: if request.auth != null;
      }
    }
    
    // サークルメッセージのクエリ用（COLLECTION_GROUP）
    match /{path=**}/circleMessages/{messageId} {
      allow read: if request.auth != null;
    }

    // 記事情報
    match /articles/{articleId} {
      allow read, write: if true; // 誰でも記事を読み書きできる
    }

    // お問い合わせ
    match /inquiries/{inquiryId} {
      allow create: if request.auth != null;
      allow read, update, delete: if false; // 管理者のみ（手動でFirebaseコンソールから確認・管理）
    }

    // サークル情報
    match /circles/{circleId} {
      allow read: if true;
      allow create: if request.auth != null;
      allow update: if request.auth != null && 
        (resource.data.createdBy == request.auth.uid || 
         exists(/databases/$(database)/documents/circles/$(circleId)/members/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/circles/$(circleId)/members/$(request.auth.uid)).data.role in ['leader', 'admin'] ||
         // いいね機能のため、認証済みユーザーによるlikesフィールドの更新を許可
         (request.auth != null && 
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes'])));
      allow delete: if request.auth != null && 
        (resource.data.createdBy == request.auth.uid || 
         exists(/databases/$(database)/documents/circles/$(circleId)/members/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/circles/$(circleId)/members/$(request.auth.uid)).data.role in ['leader', 'admin']);
    }

    // サークルのメンバー
    match /circles/{circleId}/members/{memberId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update: if request.auth != null;
      allow delete: if request.auth != null;
    }

    // サークルの入会申請
    match /circles/{circleId}/joinRequests/{requestId} {
      allow create: if request.auth != null;
      allow read: if request.auth != null && 
        (// サークルのメンバー（leader、admin）は読み取り可能
         exists(/databases/$(database)/documents/circles/$(circleId)/members/$(request.auth.uid)) &&
         get(/databases/$(database)/documents/circles/$(circleId)/members/$(request.auth.uid)).data.role in ['leader', 'admin'] ||
         // 入会申請者本人も読み取り可能
         resource.data.userId == request.auth.uid);
      allow update, delete: if request.auth != null && 
        exists(/databases/$(database)/documents/circles/$(circleId)/members/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/circles/$(circleId)/members/$(request.auth.uid)).data.role in ['leader', 'admin'];
    }

    // サークルのスケジュール
    match /circles/{circleId}/schedule/{scheduleId} {
      allow read: if true;
      allow create, update, delete: if request.auth != null && 
        exists(/databases/$(database)/documents/circles/$(circleId)/members/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/circles/$(circleId)/members/$(request.auth.uid)).data.role in ['leader', 'admin'];
    }

    // サークルのスケジュール
    match /circles/{circleId}/schedule/{eventId} {
      allow read: if request.auth != null && 
        exists(/databases/$(database)/documents/circles/$(circleId)/members/$(request.auth.uid));
      allow create, update, delete: if request.auth != null && 
        exists(/databases/$(database)/documents/circles/$(circleId)/members/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/circles/$(circleId)/members/$(request.auth.uid)).data.role in ['leader', 'admin'];
      
      // イベントの出席状況情報
      match /attendance/{userId} {
        allow read: if request.auth != null && 
          exists(/databases/$(database)/documents/circles/$(circleId)/members/$(request.auth.uid));
        allow create, update, delete: if request.auth != null && 
          request.auth.uid == userId && 
          exists(/databases/$(database)/documents/circles/$(circleId)/members/$(request.auth.uid));
      }
    }

    // サークルのメッセージ
    match /circles/{circleId}/messages/{messageId} {
      allow read: if request.auth != null && 
        exists(/databases/$(database)/documents/circles/$(circleId)/members/$(request.auth.uid));
      allow create: if request.auth != null && 
        exists(/databases/$(database)/documents/circles/$(circleId)/members/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/circles/$(circleId)/members/$(request.auth.uid)).data.role in ['leader', 'admin'];
      allow update, delete: if request.auth != null && 
        exists(/databases/$(database)/documents/circles/$(circleId)/members/$(request.auth.uid)) &&
        get(/databases/$(database)/documents/circles/$(circleId)/members/$(request.auth.uid)).data.role in ['leader', 'admin'];
      
      // サークルメッセージの既読情報
      match /readStatus/{userId} {
        allow read, create, update: if request.auth != null;
      }
      
      // サークルメッセージの出席確認情報
      match /attendance/{userId} {
        allow read: if request.auth != null && 
          exists(/databases/$(database)/documents/circles/$(circleId)/members/$(request.auth.uid));
        allow create, update, delete: if request.auth != null && 
          request.auth.uid == userId && 
          exists(/databases/$(database)/documents/circles/$(circleId)/members/$(request.auth.uid));
      }
    }

    // サークル報告
    match /reports/{reportId} {
      // 認証済みユーザーのみ作成可能
      allow create: if request.auth != null;
      
      // 作成者は自分の報告のみ読み取り可能
      allow read: if request.auth != null && 
                   request.auth.uid == resource.data.reporterId;
      
      // 更新・削除は作成者のみ
      allow update, delete: if request.auth != null && 
                            request.auth.uid == resource.data.reporterId;
    }

    // 投稿通報
    match /post_reports/{reportId} {
      // 認証済みユーザーのみ作成可能
      allow create: if request.auth != null;
      
      // 作成者は自分の報告のみ読み取り可能
      allow read: if request.auth != null && 
                   request.auth.uid == resource.data.reporterId;
      
      // 更新・削除は作成者のみ
      allow update, delete: if request.auth != null && 
                            request.auth.uid == resource.data.reporterId;
    }

    // ユーザーのブロック機能
    match /users/{userId}/blocks/{blockedCircleId} {
      // 自分のブロックデータのみ作成可能
      allow create: if request.auth != null && 
                     request.auth.uid == userId;
      
      // 自分のブロックデータのみ読み取り可能（認証チェックを緩和）
      allow read: if request.auth == null || 
                   (request.auth != null && request.auth.uid == userId);
      
      // 自分のブロックデータのみ削除可能
      allow delete: if request.auth != null && 
                    request.auth.uid == userId;
    }

    // 掲示板スレッド
    match /threads/{threadId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update: if request.auth != null && 
        (resource.data.creatorId == request.auth.uid || 
         // 投稿数や更新日時の更新は認証済みユーザーなら可能
         (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['postCount', 'updatedAt'])));
      allow delete: if request.auth != null && 
        resource.data.creatorId == request.auth.uid;
    }

    // スレッドの投稿
    match /threads/{threadId}/posts/{postId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update: if request.auth != null && 
        (resource.data.userId == request.auth.uid || 
         // いいね数の更新は認証済みユーザーなら可能
         (request.resource.data.diff(resource.data).affectedKeys().hasOnly(['reactions'])));
      allow delete: if request.auth != null && 
        resource.data.userId == request.auth.uid;
    }

    // スレッドの投稿のいいね（新しい構造）
    match /threads/{threadId}/posts/{postId}/reactions/{userId} {
      allow read: if request.auth != null;
      allow create, delete: if request.auth != null && 
        request.auth.uid == userId;
    }

    // ユーザーのスレッド設定（投稿形式の固定用）
    match /users/{userId}/threadSettings/{threadId} {
      allow read, write: if request.auth != null && 
        request.auth.uid == userId;
    }
  }
} 